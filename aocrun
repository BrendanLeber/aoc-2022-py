#!/bin/env python3
# -*- coding: utf-8 -*-
"""Advent of Code: Python Runner."""

import pdb
import sys
import traceback
from importlib import import_module
from pathlib import Path
from time import perf_counter

from tabulate import tabulate


def format_duration(duration: float) -> str:
    if duration > 1e-3:
        return f"{duration:.4f} s."
    if duration > 1e-6:
        return f"{duration / 1E-6:.4f} ms"
    return f"{duration / 1E-9:.4f} Âµs"


def run_day(day: int):
    source_file = f"src.{day:02d}"
    module = import_module(source_file)
    name = module.__doc__[module.__doc__.find("-") + 2 : -1]

    input_file = Path(f"../inputs/{day:02d}.txt")
    with open(input_file, "r") as inf:
        text = inf.read().strip("\n")

    puzzle = module.parse_input(text)

    start1 = perf_counter()
    result1 = module.part_1(puzzle)
    end1 = perf_counter()
    elapsed1 = end1 - start1

    start2 = perf_counter()
    result2 = module.part_2(puzzle)
    end2 = perf_counter()
    elapsed2 = end2 - start2

    return (name, result1, elapsed1, result2, elapsed2)


def run_all_days():
    results = []
    total_elapsed = 0
    for day in range(1, 26):
        source_file = Path(f"src/{day:02d}.py")
        if source_file.is_file():
            result = run_day(day)
            elapsed = result[2] + result[4]
            total_elapsed += elapsed
            results.append(
                [
                    result[0],
                    f"{result[1]}",
                    f"{format_duration(result[2])}",
                    f"{result[3]}",
                    f"{format_duration(result[4])}",
                    f"{format_duration(elapsed)}",
                ]
            )

    print(tabulate(results, colalign=("left", "right", "right", "right", "right", "right")))
    print(f"Total Elapsed: {format_duration(total_elapsed)}")


if __name__ == "__main__":
    try:
        if len(sys.argv) > 3:
            print(f"Syntax: {sys.argv[0]}: [DAY]")
        elif len(sys.argv) == 2:
            day = int(sys.argv[1])
            result = run_day(day)
            print(f"{result[0]}")
            print(f"  {result[1]} (elapsed: {format_duration(result[2])})")
            print(f"  {result[3]} (elapsed: {format_duration(result[4])})")
        else:
            run_all_days()
    except Exception:
        traceback.print_exc()
        pdb.post_mortem()
